name: Update Volunteer Data
on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install pandas

      - name: Download and debug data
        run: |
          curl -L "https://docs.google.com/spreadsheets/d/e/2PACX-1vT1ZqIl-YoI4bkefOkLBYPj3QcVEsXgnnhfW65ku2gvNj65ungX5tIpzbRo9DMTMaqSlvats--5e5V_/pub?gid=0&single=true&output=csv" -o data.csv
          echo "=== RAW CSV HEADER ==="
          head -n 1 data.csv
          echo "=== CSV SAMPLE DATA ==="
          head -n 5 data.csv | awk -F',' '{print $1,$2,$3,$4}'

      - name: Convert to JSON
        run: |
          python <<"EOF"
          import pandas as pd
          import json
          
          # Чтение CSV с обработкой различных форматов
          df = pd.read_csv('data.csv', encoding='utf-8-sig')
          
          # Автоматическое определение колонок
          columns_map = {
              'place': ['Место', 'место', 'Place'],
              'name': ['ФИО', 'фио', 'FIO', 'Имя'],
              'events': ['Добрые дела', 'добрые дела', 'Events'],
              'points': ['Баллы', 'баллы', 'Points']
          }
          
          # Поиск соответствий
          actual_columns = {}
          for target, possible in columns_map.items():
              for col in possible:
                  if col in df.columns:
                      actual_columns[target] = col
                      break
          
          if len(actual_columns) != 4:
              print("ERROR: Не найдены все необходимые колонки")
              print("Доступные колонки:", df.columns.tolist())
              exit(1)
          
          # Обработка данных
          df = df[list(actual_columns.values())]
          df.columns = actual_columns.keys()
          df = df.dropna()
          df['place'] = df['place'].astype(int)
          df = df.sort_values('place')
          
          # Сохранение
          with open('data.json', 'w', encoding='utf-8') as f:
              json.dump(df.to_dict('records'), f, ensure_ascii=False, indent=2)
          
          print("Успешно обработано записей:", len(df))
          EOF

      - name: Commit and push
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add data.json
          git commit -m "Autoupdate $(date +'%Y-%m-%d %H:%M')" || exit 0
          git push
